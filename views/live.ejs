<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Streaming</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-5">
    <h1 class="text-center mb-4">Live Streaming</h1>
    <p class="text-center">Logged in as: <%= userEmail %></p>

    <div class="text-center mb-4">
      <button id="startButton" class="btn btn-primary btn-lg">
        <i class="fas fa-video"></i> Start Streaming (Camera)
      </button>
      <button id="startScreenButton" class="btn btn-secondary btn-lg">
        <i class="fas fa-desktop"></i> Start Screen Sharing
      </button>
      <button id="stopButton" class="btn btn-danger btn-lg">
        <i class="fas fa-stop"></i> Stop Streaming
      </button>
    </div>

    <div class="row">
      <div class="col-md-6">
        <h3>Your Stream</h3>
        <video id="localVideo" class="w-100" autoplay muted></video>
      </div>
      <div class="col-md-6">
        <h3>Remote Stream</h3>
        <video id="remoteVideo" class="w-100" autoplay></video>
      </div>
    </div>

    <div class="text-center mt-4">
      <a href="/videos" class="btn btn-info">
        <i class="fas fa-arrow-left"></i> Back to Videos
      </a>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/simple-peer/9.11.1/simplepeer.min.js"></script>
  <script>
    const socket = io();
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const startButton = document.getElementById('startButton');
    const startScreenButton = document.getElementById('startScreenButton');
    const stopButton = document.getElementById('stopButton');

    let localStream;
    let peer;

    // Start streaming with camera and microphone
    async function startStreaming() {
      try {
        console.log('Requesting user media...');
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        console.log('User media accessed successfully');
        localVideo.srcObject = localStream;

        // Emit startStream event to the server
        socket.emit('startStream', { userEmail: '<%= userEmail %>' });

        setupPeerConnection();
      } catch (error) {
        console.error('Error accessing media devices:', error);
        alert(`Error: ${error.message}`);
      }
    }

    // Start screen sharing
    async function startScreenSharing() {
      try {
        console.log('Requesting screen sharing...');
        localStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: false });
        console.log('Screen sharing started');
        localVideo.srcObject = localStream;

        // Emit startStream event to the server
        socket.emit('startStream', { userEmail: '<%= userEmail %>' });

        setupPeerConnection();
      } catch (error) {
        console.error('Error starting screen sharing:', error);
        alert(`Error: ${error.message}`);
      }
    }

    // Set up WebRTC peer connection
    function setupPeerConnection() {
      console.log('Creating peer connection...');
      peer = new SimplePeer({ initiator: true, stream: localStream });

      peer.on('signal', (data) => {
        console.log('Sending signaling data:', data);
        socket.emit('stream', data); // Send signaling data to the server
      });

      socket.on('stream', (data) => {
        console.log('Received signaling data:', data);
        if (!peer) {
          console.log('Creating peer connection for receiver...');
          peer = new SimplePeer({ initiator: false, stream: localStream });
          peer.on('signal', (data) => {
            console.log('Sending signaling data from receiver:', data);
            socket.emit('stream', data); // Send signaling data to the server
          });
          peer.on('stream', (stream) => {
            console.log('Received remote stream');
            remoteVideo.srcObject = stream; // Display remote stream
          });
        }
        peer.signal(data); // Receive signaling data from the server
      });

      peer.on('stream', (stream) => {
        console.log('Received remote stream');
        remoteVideo.srcObject = stream; // Display remote stream
      });
    }

    // Stop streaming
    function stopStreaming() {
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localVideo.srcObject = null;
      }
      if (peer) {
        peer.destroy();
        peer = null;
      }
    }

    startButton.addEventListener('click', startStreaming);
    startScreenButton.addEventListener('click', startScreenSharing);
    stopButton.addEventListener('click', stopStreaming);
  </script>
</body>
</html>